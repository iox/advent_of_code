def parse(input)
  input.split("\n").map(&:strip).map(&:chars)
end

def part1(input)
  grid = parse(input)
  find_antinodes(grid).count("#")
end

def part2(input)
  grid = parse(input)
  find_antinodes(grid, true).count("#")
end





def find_antennas(grid)
  antennas = {}
  grid.each_with_index do |row, y|
    row.each_with_index do |cell, x|
      next if cell == '.'
      antennas[cell] ||= []
      antennas[cell] << [x, y]
    end
  end
  antennas
end

def calculate_antinodes(grid, pos1, pos2, harmonics = false)
  x1, y1 = pos1
  x2, y2 = pos2
  dx = x2 - x1
  dy = y2 - y1
  antinodes = []


  # Calculate the antinodes for part1
  if harmonics == false
    antinode1 = [x1 - dx, y1 - dy]
    antinode2 = [x2 + dx, y2 + dy]

    antinodes = [antinode1, antinode2]

    antinodes.each do |antinode|
      x, y = antinode
      next if x < 0 || y < 0 || y >= grid.size || x >= grid[0].size
      grid[y][x] = '#'
    end
  else
    # Calculate the antinodes for part2
    harmonic_count = 0

    loop do
      antinode1 = [x1 - harmonic_count * dx, y1 - harmonic_count * dy]
      antinode2 = [x2 + harmonic_count * dx, y2 + harmonic_count * dy]
  
      antinode1_is_out = antinode1[0] < 0 || antinode1[1] < 0 || antinode1[0] >= grid[0].size || antinode1[1] >= grid.size
      antinode2_is_out = antinode2[0] < 0 || antinode2[1] < 0 || antinode2[0] >= grid[0].size || antinode2[1] >= grid.size

      break if antinode1_is_out && antinode2_is_out

      antinodes << antinode1 unless antinode1_is_out
      antinodes << antinode2 unless antinode2_is_out
  
      harmonic_count += 1
    end

    antinodes.each do |antinode|
      x, y = antinode
      next if x < 0 || y < 0 || y >= grid.size || x >= grid[0].size
      grid[y][x] = '#'
    end
  end

  return antinodes.count
end


def find_antinodes(grid, harmonics = false)
  antennas = find_antennas(grid)
  antennas.each do |freq, positions|
    positions.combination(2) do |pos1, pos2|
      calculate_antinodes(grid, pos1, pos2, harmonics)
    end
  end
  "    " + grid.map(&:join).join("\n    ") + "\n"
end








puts part1(File.read("day8.txt"))
puts part2(File.read("day8.txt"))











require 'minitest/autorun'
require 'minitest/color'

class TestDay3 < Minitest::Test
  def sample_a
    <<-EOF
    ............
    ........0...
    .....0......
    .......0....
    ....0.......
    ......A.....
    ............
    ............
    ........A...
    .........A..
    ............
    ............
    EOF
  end

  def sample_a_solution
    <<-EOF
    ......#....#
    ...#....0...
    ....#0....#.
    ..#....0....
    ....0....#..
    .#....#.....
    ...#........
    #......#....
    ........A...
    .........A..
    ..........#.
    ..........#.
    EOF
  end

  def sample_b
    <<-OEF
    ..........
    ..........
    ..........
    ....a.....
    ..........
    .....a....
    ..........
    ..........
    ..........
    ..........
    OEF
  end

  def sample_b_solution
    <<-OEF
    ..........
    ...#......
    ..........
    ....a.....
    ..........
    .....a....
    ..........
    ......#...
    ..........
    ..........
    OEF
  end

  def sample_c
    <<-OEF
    ..........
    ..........
    ..........
    ....a.....
    ........a.
    .....a....
    ..........
    ..........
    ..........
    ..........
    OEF
  end

  def sample_c_solution
    <<-OEF
    ..........
    ...#......
    #.........
    ....a.....
    ........a.
    .....a....
    ..#.......
    ......#...
    ..........
    ..........
    OEF
  end

  def sample_d
    <<-OEF
    ..........
    ..........
    ..........
    ....a.....
    ........a.
    .....a....
    ..........
    ......A...
    ..........
    ..........
    OEF
  end

  def sample_d_solution
    <<-OEF
    ..........
    ...#......
    #.........
    ....a.....
    ........a.
    .....a....
    ..#.......
    ......#...
    ..........
    ..........
    OEF
  end

  def part2_sample_e
    <<-EOF
    T.........
    ...T......
    .T........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    EOF
  end

  def part2_sample_e_solution
    <<-EOF
    #....#....
    ...#......
    .#....#...
    .........#
    ..#.......
    ..........
    ...#......
    ..........
    ....#.....
    ..........
    EOF
  end

  def part2_sample_b
    <<-OEF
    ..........
    ..........
    ..........
    ....a.....
    ..........
    .....a....
    ..........
    ..........
    ..........
    ..........
    OEF
  end

  def part2_sample_b_solution
    <<-OEF
    ..........
    ...#......
    ..........
    ....#.....
    ..........
    .....#....
    ..........
    ......#...
    ..........
    .......#..
    OEF
  end





  def test_part1
    assert_equal sample_b_solution, find_antinodes(parse(sample_b))
    assert_equal sample_c_solution, find_antinodes(parse(sample_c))
    assert_equal sample_d_solution, find_antinodes(parse(sample_d))

    assert_equal sample_a_solution, find_antinodes(parse(sample_a))
    assert_equal 14, part1(sample_a)
  end

  def test_part2
    assert_equal part2_sample_b_solution, find_antinodes(parse(part2_sample_b), true)
    assert_equal part2_sample_e_solution, find_antinodes(parse(part2_sample_e), true)
    
    assert_equal 34, part2(sample_a)
  end
end